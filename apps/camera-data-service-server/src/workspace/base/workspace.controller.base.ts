/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { WorkspaceService } from "../workspace.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { WorkspaceCreateInput } from "./WorkspaceCreateInput";
import { Workspace } from "./Workspace";
import { WorkspaceFindManyArgs } from "./WorkspaceFindManyArgs";
import { WorkspaceWhereUniqueInput } from "./WorkspaceWhereUniqueInput";
import { WorkspaceUpdateInput } from "./WorkspaceUpdateInput";
import { RecognitionModelFindManyArgs } from "../../recognitionModel/base/RecognitionModelFindManyArgs";
import { RecognitionModel } from "../../recognitionModel/base/RecognitionModel";
import { RecognitionModelWhereUniqueInput } from "../../recognitionModel/base/RecognitionModelWhereUniqueInput";
import { CameraFindManyArgs } from "../../camera/base/CameraFindManyArgs";
import { Camera } from "../../camera/base/Camera";
import { CameraWhereUniqueInput } from "../../camera/base/CameraWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { RuleFindManyArgs } from "../../rule/base/RuleFindManyArgs";
import { Rule } from "../../rule/base/Rule";
import { RuleWhereUniqueInput } from "../../rule/base/RuleWhereUniqueInput";
import { ZoneFindManyArgs } from "../../zone/base/ZoneFindManyArgs";
import { Zone } from "../../zone/base/Zone";
import { ZoneWhereUniqueInput } from "../../zone/base/ZoneWhereUniqueInput";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { NotificationWhereUniqueInput } from "../../notification/base/NotificationWhereUniqueInput";
import { StatisticFindManyArgs } from "../../statistic/base/StatisticFindManyArgs";
import { Statistic } from "../../statistic/base/Statistic";
import { StatisticWhereUniqueInput } from "../../statistic/base/StatisticWhereUniqueInput";
import { ApiSettingFindManyArgs } from "../../apiSetting/base/ApiSettingFindManyArgs";
import { ApiSetting } from "../../apiSetting/base/ApiSetting";
import { ApiSettingWhereUniqueInput } from "../../apiSetting/base/ApiSettingWhereUniqueInput";
import { SupportRequestFindManyArgs } from "../../supportRequest/base/SupportRequestFindManyArgs";
import { SupportRequest } from "../../supportRequest/base/SupportRequest";
import { SupportRequestWhereUniqueInput } from "../../supportRequest/base/SupportRequestWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class WorkspaceControllerBase {
  constructor(
    protected readonly service: WorkspaceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Workspace })
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createWorkspace(
    @common.Body() data: WorkspaceCreateInput
  ): Promise<Workspace> {
    return await this.service.createWorkspace({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Workspace] })
  @ApiNestedQuery(WorkspaceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async workspaces(@common.Req() request: Request): Promise<Workspace[]> {
    const args = plainToClass(WorkspaceFindManyArgs, request.query);
    return this.service.workspaces({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Workspace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async workspace(
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<Workspace | null> {
    const result = await this.service.workspace({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Workspace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateWorkspace(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() data: WorkspaceUpdateInput
  ): Promise<Workspace | null> {
    try {
      return await this.service.updateWorkspace({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Workspace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteWorkspace(
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<Workspace | null> {
    try {
      return await this.service.deleteWorkspace({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/recognitionModels")
  @ApiNestedQuery(RecognitionModelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RecognitionModel",
    action: "read",
    possession: "any",
  })
  async findRecognitionModels(
    @common.Req() request: Request,
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<RecognitionModel[]> {
    const query = plainToClass(RecognitionModelFindManyArgs, request.query);
    const results = await this.service.findRecognitionModels(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        version: true,

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/recognitionModels")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async connectRecognitionModels(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: RecognitionModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recognitionModels: {
        connect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/recognitionModels")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async updateRecognitionModels(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: RecognitionModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recognitionModels: {
        set: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/recognitionModels")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async disconnectRecognitionModels(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: RecognitionModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      recognitionModels: {
        disconnect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/cameras")
  @ApiNestedQuery(CameraFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "read",
    possession: "any",
  })
  async findCameras(
    @common.Req() request: Request,
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<Camera[]> {
    const query = plainToClass(CameraFindManyArgs, request.query);
    const results = await this.service.findCameras(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        ipAddress: true,
        location: true,
        settings: true,

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cameras")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async connectCameras(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: CameraWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cameras: {
        connect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cameras")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async updateCameras(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: CameraWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cameras: {
        set: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cameras")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async disconnectCameras(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: CameraWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cameras: {
        disconnect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/users")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @common.Req() request: Request,
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUsers(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        email: true,
        roles: true,

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async connectUsers(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async updateUsers(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async disconnectUsers(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/rules")
  @ApiNestedQuery(RuleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Rule",
    action: "read",
    possession: "any",
  })
  async findRules(
    @common.Req() request: Request,
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<Rule[]> {
    const query = plainToClass(RuleFindManyArgs, request.query);
    const results = await this.service.findRules(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        criteria: true,

        camera: {
          select: {
            id: true,
          },
        },

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rules")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async connectRules(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: RuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rules: {
        connect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rules")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async updateRules(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: RuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rules: {
        set: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rules")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async disconnectRules(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: RuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rules: {
        disconnect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/zones")
  @ApiNestedQuery(ZoneFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Zone",
    action: "read",
    possession: "any",
  })
  async findZones(
    @common.Req() request: Request,
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<Zone[]> {
    const query = plainToClass(ZoneFindManyArgs, request.query);
    const results = await this.service.findZones(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        boundaries: true,

        camera: {
          select: {
            id: true,
          },
        },

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/zones")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async connectZones(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: ZoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      zones: {
        connect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/zones")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async updateZones(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: ZoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      zones: {
        set: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/zones")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async disconnectZones(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: ZoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      zones: {
        disconnect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/notifications")
  @ApiNestedQuery(NotificationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Notification",
    action: "read",
    possession: "any",
  })
  async findNotifications(
    @common.Req() request: Request,
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<Notification[]> {
    const query = plainToClass(NotificationFindManyArgs, request.query);
    const results = await this.service.findNotifications(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeField: true,
        message: true,

        user: {
          select: {
            id: true,
          },
        },

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/notifications")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async connectNotifications(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        connect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/notifications")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async updateNotifications(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        set: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/notifications")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async disconnectNotifications(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: NotificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notifications: {
        disconnect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/statistics")
  @ApiNestedQuery(StatisticFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Statistic",
    action: "read",
    possession: "any",
  })
  async findStatistics(
    @common.Req() request: Request,
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<Statistic[]> {
    const query = plainToClass(StatisticFindManyArgs, request.query);
    const results = await this.service.findStatistics(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        metrics: true,
        report: true,

        workspace: {
          select: {
            id: true,
          },
        },

        camera: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/statistics")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async connectStatistics(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: StatisticWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statistics: {
        connect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/statistics")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async updateStatistics(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: StatisticWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statistics: {
        set: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/statistics")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async disconnectStatistics(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: StatisticWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statistics: {
        disconnect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/apiSettings")
  @ApiNestedQuery(ApiSettingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ApiSetting",
    action: "read",
    possession: "any",
  })
  async findApiSettings(
    @common.Req() request: Request,
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<ApiSetting[]> {
    const query = plainToClass(ApiSettingFindManyArgs, request.query);
    const results = await this.service.findApiSettings(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        endpoint: true,
        configuration: true,

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/apiSettings")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async connectApiSettings(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: ApiSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiSettings: {
        connect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/apiSettings")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async updateApiSettings(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: ApiSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiSettings: {
        set: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/apiSettings")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async disconnectApiSettings(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: ApiSettingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      apiSettings: {
        disconnect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/supportRequests")
  @ApiNestedQuery(SupportRequestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SupportRequest",
    action: "read",
    possession: "any",
  })
  async findSupportRequests(
    @common.Req() request: Request,
    @common.Param() params: WorkspaceWhereUniqueInput
  ): Promise<SupportRequest[]> {
    const query = plainToClass(SupportRequestFindManyArgs, request.query);
    const results = await this.service.findSupportRequests(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        issue: true,
        priority: true,
        status: true,

        user: {
          select: {
            id: true,
          },
        },

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/supportRequests")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async connectSupportRequests(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: SupportRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supportRequests: {
        connect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/supportRequests")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async updateSupportRequests(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: SupportRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supportRequests: {
        set: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/supportRequests")
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async disconnectSupportRequests(
    @common.Param() params: WorkspaceWhereUniqueInput,
    @common.Body() body: SupportRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supportRequests: {
        disconnect: body,
      },
    };
    await this.service.updateWorkspace({
      where: params,
      data,
      select: { id: true },
    });
  }
}
