/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Workspace } from "./Workspace";
import { WorkspaceCountArgs } from "./WorkspaceCountArgs";
import { WorkspaceFindManyArgs } from "./WorkspaceFindManyArgs";
import { WorkspaceFindUniqueArgs } from "./WorkspaceFindUniqueArgs";
import { CreateWorkspaceArgs } from "./CreateWorkspaceArgs";
import { UpdateWorkspaceArgs } from "./UpdateWorkspaceArgs";
import { DeleteWorkspaceArgs } from "./DeleteWorkspaceArgs";
import { RecognitionModelFindManyArgs } from "../../recognitionModel/base/RecognitionModelFindManyArgs";
import { RecognitionModel } from "../../recognitionModel/base/RecognitionModel";
import { CameraFindManyArgs } from "../../camera/base/CameraFindManyArgs";
import { Camera } from "../../camera/base/Camera";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { RuleFindManyArgs } from "../../rule/base/RuleFindManyArgs";
import { Rule } from "../../rule/base/Rule";
import { ZoneFindManyArgs } from "../../zone/base/ZoneFindManyArgs";
import { Zone } from "../../zone/base/Zone";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { StatisticFindManyArgs } from "../../statistic/base/StatisticFindManyArgs";
import { Statistic } from "../../statistic/base/Statistic";
import { ApiSettingFindManyArgs } from "../../apiSetting/base/ApiSettingFindManyArgs";
import { ApiSetting } from "../../apiSetting/base/ApiSetting";
import { SupportRequestFindManyArgs } from "../../supportRequest/base/SupportRequestFindManyArgs";
import { SupportRequest } from "../../supportRequest/base/SupportRequest";
import { WorkspaceService } from "../workspace.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Workspace)
export class WorkspaceResolverBase {
  constructor(
    protected readonly service: WorkspaceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "read",
    possession: "any",
  })
  async _workspacesMeta(
    @graphql.Args() args: WorkspaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Workspace])
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "read",
    possession: "any",
  })
  async workspaces(
    @graphql.Args() args: WorkspaceFindManyArgs
  ): Promise<Workspace[]> {
    return this.service.workspaces(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Workspace, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "read",
    possession: "own",
  })
  async workspace(
    @graphql.Args() args: WorkspaceFindUniqueArgs
  ): Promise<Workspace | null> {
    const result = await this.service.workspace(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Workspace)
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "create",
    possession: "any",
  })
  async createWorkspace(
    @graphql.Args() args: CreateWorkspaceArgs
  ): Promise<Workspace> {
    return await this.service.createWorkspace({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Workspace)
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "update",
    possession: "any",
  })
  async updateWorkspace(
    @graphql.Args() args: UpdateWorkspaceArgs
  ): Promise<Workspace | null> {
    try {
      return await this.service.updateWorkspace({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Workspace)
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "delete",
    possession: "any",
  })
  async deleteWorkspace(
    @graphql.Args() args: DeleteWorkspaceArgs
  ): Promise<Workspace | null> {
    try {
      return await this.service.deleteWorkspace(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [RecognitionModel], { name: "recognitionModels" })
  @nestAccessControl.UseRoles({
    resource: "RecognitionModel",
    action: "read",
    possession: "any",
  })
  async findRecognitionModels(
    @graphql.Parent() parent: Workspace,
    @graphql.Args() args: RecognitionModelFindManyArgs
  ): Promise<RecognitionModel[]> {
    const results = await this.service.findRecognitionModels(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Camera], { name: "cameras" })
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "read",
    possession: "any",
  })
  async findCameras(
    @graphql.Parent() parent: Workspace,
    @graphql.Args() args: CameraFindManyArgs
  ): Promise<Camera[]> {
    const results = await this.service.findCameras(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @graphql.Parent() parent: Workspace,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Rule], { name: "rules" })
  @nestAccessControl.UseRoles({
    resource: "Rule",
    action: "read",
    possession: "any",
  })
  async findRules(
    @graphql.Parent() parent: Workspace,
    @graphql.Args() args: RuleFindManyArgs
  ): Promise<Rule[]> {
    const results = await this.service.findRules(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Zone], { name: "zones" })
  @nestAccessControl.UseRoles({
    resource: "Zone",
    action: "read",
    possession: "any",
  })
  async findZones(
    @graphql.Parent() parent: Workspace,
    @graphql.Args() args: ZoneFindManyArgs
  ): Promise<Zone[]> {
    const results = await this.service.findZones(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Notification], { name: "notifications" })
  @nestAccessControl.UseRoles({
    resource: "Notification",
    action: "read",
    possession: "any",
  })
  async findNotifications(
    @graphql.Parent() parent: Workspace,
    @graphql.Args() args: NotificationFindManyArgs
  ): Promise<Notification[]> {
    const results = await this.service.findNotifications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Statistic], { name: "statistics" })
  @nestAccessControl.UseRoles({
    resource: "Statistic",
    action: "read",
    possession: "any",
  })
  async findStatistics(
    @graphql.Parent() parent: Workspace,
    @graphql.Args() args: StatisticFindManyArgs
  ): Promise<Statistic[]> {
    const results = await this.service.findStatistics(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ApiSetting], { name: "apiSettings" })
  @nestAccessControl.UseRoles({
    resource: "ApiSetting",
    action: "read",
    possession: "any",
  })
  async findApiSettings(
    @graphql.Parent() parent: Workspace,
    @graphql.Args() args: ApiSettingFindManyArgs
  ): Promise<ApiSetting[]> {
    const results = await this.service.findApiSettings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SupportRequest], { name: "supportRequests" })
  @nestAccessControl.UseRoles({
    resource: "SupportRequest",
    action: "read",
    possession: "any",
  })
  async findSupportRequests(
    @graphql.Parent() parent: Workspace,
    @graphql.Args() args: SupportRequestFindManyArgs
  ): Promise<SupportRequest[]> {
    const results = await this.service.findSupportRequests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
