/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Workspace as PrismaWorkspace,
  RecognitionModel as PrismaRecognitionModel,
  Camera as PrismaCamera,
  User as PrismaUser,
  Rule as PrismaRule,
  Zone as PrismaZone,
  Notification as PrismaNotification,
  Statistic as PrismaStatistic,
  ApiSetting as PrismaApiSetting,
  SupportRequest as PrismaSupportRequest,
} from "@prisma/client";

export class WorkspaceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkspaceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workspace.count(args);
  }

  async workspaces(
    args: Prisma.WorkspaceFindManyArgs
  ): Promise<PrismaWorkspace[]> {
    return this.prisma.workspace.findMany(args);
  }
  async workspace(
    args: Prisma.WorkspaceFindUniqueArgs
  ): Promise<PrismaWorkspace | null> {
    return this.prisma.workspace.findUnique(args);
  }
  async createWorkspace(
    args: Prisma.WorkspaceCreateArgs
  ): Promise<PrismaWorkspace> {
    return this.prisma.workspace.create(args);
  }
  async updateWorkspace(
    args: Prisma.WorkspaceUpdateArgs
  ): Promise<PrismaWorkspace> {
    return this.prisma.workspace.update(args);
  }
  async deleteWorkspace(
    args: Prisma.WorkspaceDeleteArgs
  ): Promise<PrismaWorkspace> {
    return this.prisma.workspace.delete(args);
  }

  async findRecognitionModels(
    parentId: string,
    args: Prisma.RecognitionModelFindManyArgs
  ): Promise<PrismaRecognitionModel[]> {
    return this.prisma.workspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .recognitionModels(args);
  }

  async findCameras(
    parentId: string,
    args: Prisma.CameraFindManyArgs
  ): Promise<PrismaCamera[]> {
    return this.prisma.workspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cameras(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.workspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }

  async findRules(
    parentId: string,
    args: Prisma.RuleFindManyArgs
  ): Promise<PrismaRule[]> {
    return this.prisma.workspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rules(args);
  }

  async findZones(
    parentId: string,
    args: Prisma.ZoneFindManyArgs
  ): Promise<PrismaZone[]> {
    return this.prisma.workspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .zones(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.workspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async findStatistics(
    parentId: string,
    args: Prisma.StatisticFindManyArgs
  ): Promise<PrismaStatistic[]> {
    return this.prisma.workspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .statistics(args);
  }

  async findApiSettings(
    parentId: string,
    args: Prisma.ApiSettingFindManyArgs
  ): Promise<PrismaApiSetting[]> {
    return this.prisma.workspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .apiSettings(args);
  }

  async findSupportRequests(
    parentId: string,
    args: Prisma.SupportRequestFindManyArgs
  ): Promise<PrismaSupportRequest[]> {
    return this.prisma.workspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .supportRequests(args);
  }
}
