/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RecognitionModel } from "./RecognitionModel";
import { RecognitionModelCountArgs } from "./RecognitionModelCountArgs";
import { RecognitionModelFindManyArgs } from "./RecognitionModelFindManyArgs";
import { RecognitionModelFindUniqueArgs } from "./RecognitionModelFindUniqueArgs";
import { CreateRecognitionModelArgs } from "./CreateRecognitionModelArgs";
import { UpdateRecognitionModelArgs } from "./UpdateRecognitionModelArgs";
import { DeleteRecognitionModelArgs } from "./DeleteRecognitionModelArgs";
import { Workspace } from "../../workspace/base/Workspace";
import { RecognitionModelService } from "../recognitionModel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RecognitionModel)
export class RecognitionModelResolverBase {
  constructor(
    protected readonly service: RecognitionModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RecognitionModel",
    action: "read",
    possession: "any",
  })
  async _recognitionModelsMeta(
    @graphql.Args() args: RecognitionModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RecognitionModel])
  @nestAccessControl.UseRoles({
    resource: "RecognitionModel",
    action: "read",
    possession: "any",
  })
  async recognitionModels(
    @graphql.Args() args: RecognitionModelFindManyArgs
  ): Promise<RecognitionModel[]> {
    return this.service.recognitionModels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RecognitionModel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RecognitionModel",
    action: "read",
    possession: "own",
  })
  async recognitionModel(
    @graphql.Args() args: RecognitionModelFindUniqueArgs
  ): Promise<RecognitionModel | null> {
    const result = await this.service.recognitionModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RecognitionModel)
  @nestAccessControl.UseRoles({
    resource: "RecognitionModel",
    action: "create",
    possession: "any",
  })
  async createRecognitionModel(
    @graphql.Args() args: CreateRecognitionModelArgs
  ): Promise<RecognitionModel> {
    return await this.service.createRecognitionModel({
      ...args,
      data: {
        ...args.data,

        workspace: args.data.workspace
          ? {
              connect: args.data.workspace,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RecognitionModel)
  @nestAccessControl.UseRoles({
    resource: "RecognitionModel",
    action: "update",
    possession: "any",
  })
  async updateRecognitionModel(
    @graphql.Args() args: UpdateRecognitionModelArgs
  ): Promise<RecognitionModel | null> {
    try {
      return await this.service.updateRecognitionModel({
        ...args,
        data: {
          ...args.data,

          workspace: args.data.workspace
            ? {
                connect: args.data.workspace,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecognitionModel)
  @nestAccessControl.UseRoles({
    resource: "RecognitionModel",
    action: "delete",
    possession: "any",
  })
  async deleteRecognitionModel(
    @graphql.Args() args: DeleteRecognitionModelArgs
  ): Promise<RecognitionModel | null> {
    try {
      return await this.service.deleteRecognitionModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Workspace, {
    nullable: true,
    name: "workspace",
  })
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "read",
    possession: "any",
  })
  async getWorkspace(
    @graphql.Parent() parent: RecognitionModel
  ): Promise<Workspace | null> {
    const result = await this.service.getWorkspace(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
