/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CameraService } from "../camera.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CameraCreateInput } from "./CameraCreateInput";
import { Camera } from "./Camera";
import { CameraFindManyArgs } from "./CameraFindManyArgs";
import { CameraWhereUniqueInput } from "./CameraWhereUniqueInput";
import { CameraUpdateInput } from "./CameraUpdateInput";
import { RuleFindManyArgs } from "../../rule/base/RuleFindManyArgs";
import { Rule } from "../../rule/base/Rule";
import { RuleWhereUniqueInput } from "../../rule/base/RuleWhereUniqueInput";
import { ZoneFindManyArgs } from "../../zone/base/ZoneFindManyArgs";
import { Zone } from "../../zone/base/Zone";
import { ZoneWhereUniqueInput } from "../../zone/base/ZoneWhereUniqueInput";
import { StatisticFindManyArgs } from "../../statistic/base/StatisticFindManyArgs";
import { Statistic } from "../../statistic/base/Statistic";
import { StatisticWhereUniqueInput } from "../../statistic/base/StatisticWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CameraControllerBase {
  constructor(
    protected readonly service: CameraService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Camera })
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCamera(@common.Body() data: CameraCreateInput): Promise<Camera> {
    return await this.service.createCamera({
      data: {
        ...data,

        workspace: data.workspace
          ? {
              connect: data.workspace,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        ipAddress: true,
        location: true,
        settings: true,

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Camera] })
  @ApiNestedQuery(CameraFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async cameras(@common.Req() request: Request): Promise<Camera[]> {
    const args = plainToClass(CameraFindManyArgs, request.query);
    return this.service.cameras({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        ipAddress: true,
        location: true,
        settings: true,

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Camera })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async camera(
    @common.Param() params: CameraWhereUniqueInput
  ): Promise<Camera | null> {
    const result = await this.service.camera({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        ipAddress: true,
        location: true,
        settings: true,

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Camera })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCamera(
    @common.Param() params: CameraWhereUniqueInput,
    @common.Body() data: CameraUpdateInput
  ): Promise<Camera | null> {
    try {
      return await this.service.updateCamera({
        where: params,
        data: {
          ...data,

          workspace: data.workspace
            ? {
                connect: data.workspace,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          ipAddress: true,
          location: true,
          settings: true,

          workspace: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Camera })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCamera(
    @common.Param() params: CameraWhereUniqueInput
  ): Promise<Camera | null> {
    try {
      return await this.service.deleteCamera({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          ipAddress: true,
          location: true,
          settings: true,

          workspace: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/rules")
  @ApiNestedQuery(RuleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Rule",
    action: "read",
    possession: "any",
  })
  async findRules(
    @common.Req() request: Request,
    @common.Param() params: CameraWhereUniqueInput
  ): Promise<Rule[]> {
    const query = plainToClass(RuleFindManyArgs, request.query);
    const results = await this.service.findRules(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        criteria: true,

        camera: {
          select: {
            id: true,
          },
        },

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rules")
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "update",
    possession: "any",
  })
  async connectRules(
    @common.Param() params: CameraWhereUniqueInput,
    @common.Body() body: RuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rules: {
        connect: body,
      },
    };
    await this.service.updateCamera({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rules")
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "update",
    possession: "any",
  })
  async updateRules(
    @common.Param() params: CameraWhereUniqueInput,
    @common.Body() body: RuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rules: {
        set: body,
      },
    };
    await this.service.updateCamera({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rules")
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "update",
    possession: "any",
  })
  async disconnectRules(
    @common.Param() params: CameraWhereUniqueInput,
    @common.Body() body: RuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rules: {
        disconnect: body,
      },
    };
    await this.service.updateCamera({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/zones")
  @ApiNestedQuery(ZoneFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Zone",
    action: "read",
    possession: "any",
  })
  async findZones(
    @common.Req() request: Request,
    @common.Param() params: CameraWhereUniqueInput
  ): Promise<Zone[]> {
    const query = plainToClass(ZoneFindManyArgs, request.query);
    const results = await this.service.findZones(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        boundaries: true,

        camera: {
          select: {
            id: true,
          },
        },

        workspace: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/zones")
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "update",
    possession: "any",
  })
  async connectZones(
    @common.Param() params: CameraWhereUniqueInput,
    @common.Body() body: ZoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      zones: {
        connect: body,
      },
    };
    await this.service.updateCamera({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/zones")
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "update",
    possession: "any",
  })
  async updateZones(
    @common.Param() params: CameraWhereUniqueInput,
    @common.Body() body: ZoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      zones: {
        set: body,
      },
    };
    await this.service.updateCamera({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/zones")
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "update",
    possession: "any",
  })
  async disconnectZones(
    @common.Param() params: CameraWhereUniqueInput,
    @common.Body() body: ZoneWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      zones: {
        disconnect: body,
      },
    };
    await this.service.updateCamera({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/statistics")
  @ApiNestedQuery(StatisticFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Statistic",
    action: "read",
    possession: "any",
  })
  async findStatistics(
    @common.Req() request: Request,
    @common.Param() params: CameraWhereUniqueInput
  ): Promise<Statistic[]> {
    const query = plainToClass(StatisticFindManyArgs, request.query);
    const results = await this.service.findStatistics(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        metrics: true,
        report: true,

        workspace: {
          select: {
            id: true,
          },
        },

        camera: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/statistics")
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "update",
    possession: "any",
  })
  async connectStatistics(
    @common.Param() params: CameraWhereUniqueInput,
    @common.Body() body: StatisticWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statistics: {
        connect: body,
      },
    };
    await this.service.updateCamera({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/statistics")
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "update",
    possession: "any",
  })
  async updateStatistics(
    @common.Param() params: CameraWhereUniqueInput,
    @common.Body() body: StatisticWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statistics: {
        set: body,
      },
    };
    await this.service.updateCamera({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/statistics")
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "update",
    possession: "any",
  })
  async disconnectStatistics(
    @common.Param() params: CameraWhereUniqueInput,
    @common.Body() body: StatisticWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statistics: {
        disconnect: body,
      },
    };
    await this.service.updateCamera({
      where: params,
      data,
      select: { id: true },
    });
  }
}
