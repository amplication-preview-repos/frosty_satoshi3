/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Camera as PrismaCamera,
  Rule as PrismaRule,
  Zone as PrismaZone,
  Statistic as PrismaStatistic,
  Workspace as PrismaWorkspace,
} from "@prisma/client";

export class CameraServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CameraCountArgs, "select">): Promise<number> {
    return this.prisma.camera.count(args);
  }

  async cameras(args: Prisma.CameraFindManyArgs): Promise<PrismaCamera[]> {
    return this.prisma.camera.findMany(args);
  }
  async camera(
    args: Prisma.CameraFindUniqueArgs
  ): Promise<PrismaCamera | null> {
    return this.prisma.camera.findUnique(args);
  }
  async createCamera(args: Prisma.CameraCreateArgs): Promise<PrismaCamera> {
    return this.prisma.camera.create(args);
  }
  async updateCamera(args: Prisma.CameraUpdateArgs): Promise<PrismaCamera> {
    return this.prisma.camera.update(args);
  }
  async deleteCamera(args: Prisma.CameraDeleteArgs): Promise<PrismaCamera> {
    return this.prisma.camera.delete(args);
  }

  async findRules(
    parentId: string,
    args: Prisma.RuleFindManyArgs
  ): Promise<PrismaRule[]> {
    return this.prisma.camera
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rules(args);
  }

  async findZones(
    parentId: string,
    args: Prisma.ZoneFindManyArgs
  ): Promise<PrismaZone[]> {
    return this.prisma.camera
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .zones(args);
  }

  async findStatistics(
    parentId: string,
    args: Prisma.StatisticFindManyArgs
  ): Promise<PrismaStatistic[]> {
    return this.prisma.camera
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .statistics(args);
  }

  async getWorkspace(parentId: string): Promise<PrismaWorkspace | null> {
    return this.prisma.camera
      .findUnique({
        where: { id: parentId },
      })
      .workspace();
  }
}
