/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Camera } from "./Camera";
import { CameraCountArgs } from "./CameraCountArgs";
import { CameraFindManyArgs } from "./CameraFindManyArgs";
import { CameraFindUniqueArgs } from "./CameraFindUniqueArgs";
import { CreateCameraArgs } from "./CreateCameraArgs";
import { UpdateCameraArgs } from "./UpdateCameraArgs";
import { DeleteCameraArgs } from "./DeleteCameraArgs";
import { RuleFindManyArgs } from "../../rule/base/RuleFindManyArgs";
import { Rule } from "../../rule/base/Rule";
import { ZoneFindManyArgs } from "../../zone/base/ZoneFindManyArgs";
import { Zone } from "../../zone/base/Zone";
import { StatisticFindManyArgs } from "../../statistic/base/StatisticFindManyArgs";
import { Statistic } from "../../statistic/base/Statistic";
import { Workspace } from "../../workspace/base/Workspace";
import { CameraService } from "../camera.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Camera)
export class CameraResolverBase {
  constructor(
    protected readonly service: CameraService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "read",
    possession: "any",
  })
  async _camerasMeta(
    @graphql.Args() args: CameraCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Camera])
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "read",
    possession: "any",
  })
  async cameras(@graphql.Args() args: CameraFindManyArgs): Promise<Camera[]> {
    return this.service.cameras(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Camera, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "read",
    possession: "own",
  })
  async camera(
    @graphql.Args() args: CameraFindUniqueArgs
  ): Promise<Camera | null> {
    const result = await this.service.camera(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Camera)
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "create",
    possession: "any",
  })
  async createCamera(@graphql.Args() args: CreateCameraArgs): Promise<Camera> {
    return await this.service.createCamera({
      ...args,
      data: {
        ...args.data,

        workspace: args.data.workspace
          ? {
              connect: args.data.workspace,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Camera)
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "update",
    possession: "any",
  })
  async updateCamera(
    @graphql.Args() args: UpdateCameraArgs
  ): Promise<Camera | null> {
    try {
      return await this.service.updateCamera({
        ...args,
        data: {
          ...args.data,

          workspace: args.data.workspace
            ? {
                connect: args.data.workspace,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Camera)
  @nestAccessControl.UseRoles({
    resource: "Camera",
    action: "delete",
    possession: "any",
  })
  async deleteCamera(
    @graphql.Args() args: DeleteCameraArgs
  ): Promise<Camera | null> {
    try {
      return await this.service.deleteCamera(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Rule], { name: "rules" })
  @nestAccessControl.UseRoles({
    resource: "Rule",
    action: "read",
    possession: "any",
  })
  async findRules(
    @graphql.Parent() parent: Camera,
    @graphql.Args() args: RuleFindManyArgs
  ): Promise<Rule[]> {
    const results = await this.service.findRules(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Zone], { name: "zones" })
  @nestAccessControl.UseRoles({
    resource: "Zone",
    action: "read",
    possession: "any",
  })
  async findZones(
    @graphql.Parent() parent: Camera,
    @graphql.Args() args: ZoneFindManyArgs
  ): Promise<Zone[]> {
    const results = await this.service.findZones(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Statistic], { name: "statistics" })
  @nestAccessControl.UseRoles({
    resource: "Statistic",
    action: "read",
    possession: "any",
  })
  async findStatistics(
    @graphql.Parent() parent: Camera,
    @graphql.Args() args: StatisticFindManyArgs
  ): Promise<Statistic[]> {
    const results = await this.service.findStatistics(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Workspace, {
    nullable: true,
    name: "workspace",
  })
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "read",
    possession: "any",
  })
  async getWorkspace(
    @graphql.Parent() parent: Camera
  ): Promise<Workspace | null> {
    const result = await this.service.getWorkspace(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
