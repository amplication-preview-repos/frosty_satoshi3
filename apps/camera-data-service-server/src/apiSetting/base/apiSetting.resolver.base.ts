/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ApiSetting } from "./ApiSetting";
import { ApiSettingCountArgs } from "./ApiSettingCountArgs";
import { ApiSettingFindManyArgs } from "./ApiSettingFindManyArgs";
import { ApiSettingFindUniqueArgs } from "./ApiSettingFindUniqueArgs";
import { CreateApiSettingArgs } from "./CreateApiSettingArgs";
import { UpdateApiSettingArgs } from "./UpdateApiSettingArgs";
import { DeleteApiSettingArgs } from "./DeleteApiSettingArgs";
import { Workspace } from "../../workspace/base/Workspace";
import { ApiSettingService } from "../apiSetting.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApiSetting)
export class ApiSettingResolverBase {
  constructor(
    protected readonly service: ApiSettingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApiSetting",
    action: "read",
    possession: "any",
  })
  async _apiSettingsMeta(
    @graphql.Args() args: ApiSettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApiSetting])
  @nestAccessControl.UseRoles({
    resource: "ApiSetting",
    action: "read",
    possession: "any",
  })
  async apiSettings(
    @graphql.Args() args: ApiSettingFindManyArgs
  ): Promise<ApiSetting[]> {
    return this.service.apiSettings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApiSetting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApiSetting",
    action: "read",
    possession: "own",
  })
  async apiSetting(
    @graphql.Args() args: ApiSettingFindUniqueArgs
  ): Promise<ApiSetting | null> {
    const result = await this.service.apiSetting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApiSetting)
  @nestAccessControl.UseRoles({
    resource: "ApiSetting",
    action: "create",
    possession: "any",
  })
  async createApiSetting(
    @graphql.Args() args: CreateApiSettingArgs
  ): Promise<ApiSetting> {
    return await this.service.createApiSetting({
      ...args,
      data: {
        ...args.data,

        workspace: args.data.workspace
          ? {
              connect: args.data.workspace,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApiSetting)
  @nestAccessControl.UseRoles({
    resource: "ApiSetting",
    action: "update",
    possession: "any",
  })
  async updateApiSetting(
    @graphql.Args() args: UpdateApiSettingArgs
  ): Promise<ApiSetting | null> {
    try {
      return await this.service.updateApiSetting({
        ...args,
        data: {
          ...args.data,

          workspace: args.data.workspace
            ? {
                connect: args.data.workspace,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApiSetting)
  @nestAccessControl.UseRoles({
    resource: "ApiSetting",
    action: "delete",
    possession: "any",
  })
  async deleteApiSetting(
    @graphql.Args() args: DeleteApiSettingArgs
  ): Promise<ApiSetting | null> {
    try {
      return await this.service.deleteApiSetting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Workspace, {
    nullable: true,
    name: "workspace",
  })
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "read",
    possession: "any",
  })
  async getWorkspace(
    @graphql.Parent() parent: ApiSetting
  ): Promise<Workspace | null> {
    const result = await this.service.getWorkspace(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
