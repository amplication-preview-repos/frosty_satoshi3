/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ApiSetting as PrismaApiSetting,
  Workspace as PrismaWorkspace,
} from "@prisma/client";

export class ApiSettingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApiSettingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.apiSetting.count(args);
  }

  async apiSettings(
    args: Prisma.ApiSettingFindManyArgs
  ): Promise<PrismaApiSetting[]> {
    return this.prisma.apiSetting.findMany(args);
  }
  async apiSetting(
    args: Prisma.ApiSettingFindUniqueArgs
  ): Promise<PrismaApiSetting | null> {
    return this.prisma.apiSetting.findUnique(args);
  }
  async createApiSetting(
    args: Prisma.ApiSettingCreateArgs
  ): Promise<PrismaApiSetting> {
    return this.prisma.apiSetting.create(args);
  }
  async updateApiSetting(
    args: Prisma.ApiSettingUpdateArgs
  ): Promise<PrismaApiSetting> {
    return this.prisma.apiSetting.update(args);
  }
  async deleteApiSetting(
    args: Prisma.ApiSettingDeleteArgs
  ): Promise<PrismaApiSetting> {
    return this.prisma.apiSetting.delete(args);
  }

  async getWorkspace(parentId: string): Promise<PrismaWorkspace | null> {
    return this.prisma.apiSetting
      .findUnique({
        where: { id: parentId },
      })
      .workspace();
  }
}
